package profiling:system@0.0.0;

interface cpu {
    record cpu-mask {
        mask: list<bool>,
    }

    record tlb-size {
        count: u32,
        unit: u32,
    }

    record address-sizes {
        phy: u8,
        virt: u8
    }

    record arm64-cpu-info {
        processor: u32,
        bogomips: f32,
        features: list<string>,
        cpu-implementer: u16,
        cpu-architecture: u16,
        cpu-variant: u16,
        cpu-part: u16,
        cpu-revision: u16,
        address-sizes: address-sizes,
    }

    record x64-cpu-info {
        processor: u32,
        vendor-id: string,
        model-name: string,
        cpu-family: u32,
        model: u32,
        stepping: u32,
        microcode: string,
        cpu-mhz: f64,
        cache-size: u32,
        physical-id: u32,
        siblings: u32,
        core-id: u32,
        cpu-cores: u32,
        apicid: u32,
        initial-apicid: u32,
        fpu: bool,
        fpu-exception: bool,
        cpuid-level: u32,
        wp: bool, // wp stands for ?
        flag: list<string>,
        bugs: list<string>,
        bogomips: f32,
        tlb-size: tlb-size,
        clflush-size: u8,
        cache-alignment: u8,
        address-sizes: address-sizes,
        power-management: list<string>,
    }

    variant cpu-info {
        x64(list<x64-cpu-info>),
        arm64(list<arm64-cpu-info>),
        unsupported(string)
    }

    record cpu-stat {
        /// Time(ms) spent in user mode
        user: u64,
        /// Time(ms) spent in user mode with low priority (nice)
        nice: u64,
        /// Time(ms) spent in system mode
        system: u64,
        /// Time(ms) spent in the idle state
        idle: u64,
        /// Time(ms) waiting for I/O to complete
        ///
        /// This value is not reliable, for the following reasons:
        ///
        /// 1. The CPU will not wait for I/O to complete; iowait is the time that a
        ///    task is waiting for I/O to complete.  When a CPU goes into idle state
        ///    for outstanding task I/O, another task will be scheduled on this CPU.
        ///
        /// 2. On a multi-core CPU, this task waiting for I/O to complete is not running
        ///    on any CPU, so the iowait for each CPU is difficult to calculate.
        ///
        /// 3. The value in this field may *decrease* in certain conditions.
        ///
        /// (Since Linux 2.5.41)
        iowait: option<u64>,
        /// Time(ms) servicing interrupts
        ///
        /// (Since Linux 2.6.0)
        irq: option<u64>,
        /// Time(ms) servicing softirqs
        ///
        /// (Since Linux 2.6.0)
        softirq: option<u64>,
        /// Time(ms) of stolen time.
        ///
        /// Stolen time is the time spent in other operating systems when running in
        /// a virtualized environment.
        ///
        /// (Since Linux 2.6.11)
        steal: option<u64>,
        /// Time(ms) spent running a virtual CPU for guest operating systems under control
        /// of the linux kernel
        ///
        /// (Since Linux 2.6.24)
        guest: option<u64>,
        /// Time(ms) spent running a niced guest
        ///
        /// (Since Linux 2.6.33)
        guest-nice: option<u64>,
    }

    record cpu-stats {
        total: cpu-stat,
        per-cpu: list<cpu-stat>,
    }

    // For most system statistics, sampling interval less than 1ms isn't of much use.
    // Thus the minimal interval-ms is 1ms. 
    // stat function accepts interval-ms as a hint to guarantee collected statistics
    // data is new enough and with low overhead.
    stat: func(interval-ms: u64) -> result<cpu-stats, string>;
    info: func() -> result<cpu-info, string>;
}
